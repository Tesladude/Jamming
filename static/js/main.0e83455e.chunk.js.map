{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/Tracklist/Tracklist.js","Components/Searchresults/SearchResults.js","Components/Playlist/playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","search","bind","handleTermChange","term","this","onSearch","state","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onRemove","track","onAdd","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResult","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","searchResults","playlistName","addtrack","updatePlaylistName","savePlayList","trackURIs","filter","currentTrack","find","savedTrack","push","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e83455e.chunk.js","sourcesContent":["\r\nconst clientId = 'fb7d40f7652e4d2e957e1eaba5b4aaa9'; // Insert client ID here.\r\nconst redirectUri = 'http://jammming.s3-website-us-east-1.amazonaws.com/'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if (!jsonResponse.tracks) {\r\n        return [];\r\n      }\r\n      return jsonResponse.tracks.items.map(track => ({\r\n        id: track.id,\r\n        name: track.name,\r\n        artist: track.artists[0].name,\r\n        album: track.album.name,\r\n        uri: track.uri\r\n      }));\r\n    });\r\n  },\r\n\r\n  savePlaylist(name, trackUris) {\r\n    if (!name || !trackUris.length) {\r\n      return;\r\n    }\r\n\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userId;\r\n\r\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n    ).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n      userId = jsonResponse.id;\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n        headers: headers,\r\n        method: 'POST',\r\n        body: JSON.stringify({name: name})\r\n      }).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n        const playlistId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({uris: trackUris})\r\n        });\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\nexport class SearchBar extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.search=this.search.bind(this)\r\n        this.handleTermChange=this.handleTermChange.bind(this)\r\n    }\r\n\r\n    search(term){\r\n        this.props.onSearch(this.state.term)\r\n    }\r\n\r\n    handleTermChange(e){\r\n        this.setState({term: e.target.value})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './Track.css';\r\n\r\n export class Track extends React.Component{\r\n     constructor(props){\r\n         super(props)\r\n         this.addTrack=this.addTrack.bind(this)\r\n         this.removeTrack=this.removeTrack.bind(this)\r\n     }\r\n\r\n   \r\n    renderAction() {\r\n        if(this.props.isRemoval){\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track)\r\n    }\r\n\r\n\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Track\">\r\n            <div className=\"Track-information\">\r\n            <h3>{this.props.track.name}</h3>\r\n                <p>{this.props.track.artist} | {this.props.track.album} </p>\r\n            </div>\r\n                {this.renderAction() }\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './Tracklist.css';\r\nimport {Track} from '../Track/Track';\r\n\r\n export class TrackList extends React.Component{\r\n   \r\n    render(){\r\n        return(\r\n            <div className=\"TrackList\" >\r\n                {this.props.tracks.map(track => {return <Track track={track} onAdd={this.props.onAdd} isRemoval={this.props.isRemoval}\r\n                onRemove={this.props.onRemove} key={track.id}/>})} \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './SearchResults.css';\r\nimport  {TrackList} from '../Tracklist/Tracklist';\r\n\r\nexport class SearchResults extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"SearchResults\">\r\n            <h2>Results</h2>\r\n            <TrackList tracks={this.props.searchResult} onAdd={this.props.onAdd} isRemoval={false}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './playlist.css';\r\nimport  {TrackList} from '../Tracklist/Tracklist';\r\n\r\nexport class Playlist extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.handleNameChange=this.handleNameChange.bind(this)\r\n    }\r\n\r\n    handleNameChange(e){    \r\n        this.props.onNameChange(e.target.value)\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"Playlist\">\r\n        <input defaultValue={'New Playlist'} onChange={this.handleNameChange}/>\r\n        <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true}/>\r\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n        </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { SearchBar } from '../SearchBar/SearchBar';\nimport { SearchResults} from '../Searchresults/SearchResults';\nimport { Playlist} from '../Playlist/playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props) \n    this.state = {searchResults: [],\n                  playlistName:'',\n                  playlistTracks: []\n                    }\n    this.addtrack=this.addtrack.bind(this)\n    this.removeTrack=this.removeTrack.bind(this)\n    this.updatePlaylistName = this.updatePlaylistName.bind(this)\n    this.savePlayList=this.savePlayList.bind(this)\n    this.search=this.search.bind(this)\n  };\n\n  savePlayList(){\n    const trackURIs = this.state.playlistTracks.map(track =>track.uri)\n    Spotify.savePlayList(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'new playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  updatePlaylistName(name){\n    this.setState({playlistName: name })\n  }\n\n  search(term){\n    Spotify.search(term).then(searchResults => {this.setState({searchResults: searchResults})\n   })\n  }\n\n  removeTrack(track){\n    let tracks =this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({playlistTracks: tracks})\n  }\n\n  addtrack(track){\n    let tracks =this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({playlistTracks: tracks})\n  }\n\n  render(){\n    return (\n        <div>\n          <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n          <div className=\"App\">\n            <SearchBar onSearch={this.search}/> \n            <div className=\"App-playlist\">\n              <SearchResults searchResult={this.state.searchResults} onAdd={this.addtrack} />\n              <Playlist name={this.state.playlistName} playlistTracks={this.state.playlistTracks} \n              onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlayList}/>\n            </div>\n          </div>\n    </div>\n  );}\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}